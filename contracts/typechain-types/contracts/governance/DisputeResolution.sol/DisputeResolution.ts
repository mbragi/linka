/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace DisputeResolution {
  export type DisputeCaseStruct = {
    escrowId: BigNumberish;
    initiator: AddressLike;
    arbitrator: AddressLike;
    reason: string;
    evidence: string;
    createdAt: BigNumberish;
    deadline: BigNumberish;
    status: BigNumberish;
    buyerWins: boolean;
    arbitratorFee: BigNumberish;
  };

  export type DisputeCaseStructOutput = [
    escrowId: bigint,
    initiator: string,
    arbitrator: string,
    reason: string,
    evidence: string,
    createdAt: bigint,
    deadline: bigint,
    status: bigint,
    buyerWins: boolean,
    arbitratorFee: bigint
  ] & {
    escrowId: bigint;
    initiator: string;
    arbitrator: string;
    reason: string;
    evidence: string;
    createdAt: bigint;
    deadline: bigint;
    status: bigint;
    buyerWins: boolean;
    arbitratorFee: bigint;
  };
}

export interface DisputeResolutionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ARBITRATION_TIMEOUT"
      | "ARBITRATOR_FEE"
      | "ARBITRATOR_STAKE"
      | "DISPUTE_TIMEOUT"
      | "arbitratorCases"
      | "arbitrators"
      | "assignDispute"
      | "deactivateArbitrator"
      | "disputes"
      | "escrowManager"
      | "getArbitratorCases"
      | "getArbitratorStats"
      | "getDispute"
      | "isArbitratorActive"
      | "owner"
      | "registerArbitrator"
      | "renounceOwnership"
      | "resolveDispute"
      | "setEscrowManager"
      | "slashArbitrator"
      | "totalArbitrators"
      | "totalDisputes"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArbitratorDeactivated"
      | "ArbitratorRegistered"
      | "ArbitratorStakeSlashed"
      | "DisputeAssigned"
      | "DisputeResolved"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ARBITRATION_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ARBITRATOR_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ARBITRATOR_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISPUTE_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arbitratorCases",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignDispute",
    values: [BigNumberish, AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateArbitrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArbitratorCases",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getArbitratorStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isArbitratorActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerArbitrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEscrowManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slashArbitrator",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalArbitrators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDisputes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ARBITRATION_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ARBITRATOR_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ARBITRATOR_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISPUTE_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitratorCases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitrators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateArbitrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escrowManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArbitratorCases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArbitratorStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDispute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isArbitratorActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerArbitrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEscrowManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashArbitrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalArbitrators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDisputes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ArbitratorDeactivatedEvent {
  export type InputTuple = [arbitrator: AddressLike];
  export type OutputTuple = [arbitrator: string];
  export interface OutputObject {
    arbitrator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArbitratorRegisteredEvent {
  export type InputTuple = [arbitrator: AddressLike, stake: BigNumberish];
  export type OutputTuple = [arbitrator: string, stake: bigint];
  export interface OutputObject {
    arbitrator: string;
    stake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArbitratorStakeSlashedEvent {
  export type InputTuple = [arbitrator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [arbitrator: string, amount: bigint];
  export interface OutputObject {
    arbitrator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeAssignedEvent {
  export type InputTuple = [escrowId: BigNumberish, arbitrator: AddressLike];
  export type OutputTuple = [escrowId: bigint, arbitrator: string];
  export interface OutputObject {
    escrowId: bigint;
    arbitrator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    arbitrator: AddressLike,
    buyerWins: boolean
  ];
  export type OutputTuple = [
    escrowId: bigint,
    arbitrator: string,
    buyerWins: boolean
  ];
  export interface OutputObject {
    escrowId: bigint;
    arbitrator: string;
    buyerWins: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DisputeResolution extends BaseContract {
  connect(runner?: ContractRunner | null): DisputeResolution;
  waitForDeployment(): Promise<this>;

  interface: DisputeResolutionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ARBITRATION_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  ARBITRATOR_FEE: TypedContractMethod<[], [bigint], "view">;

  ARBITRATOR_STAKE: TypedContractMethod<[], [bigint], "view">;

  DISPUTE_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  arbitratorCases: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  arbitrators: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, bigint, bigint, bigint] & {
        arbitrator: string;
        stake: bigint;
        active: boolean;
        totalCases: bigint;
        successfulCases: bigint;
        lastActive: bigint;
      }
    ],
    "view"
  >;

  assignDispute: TypedContractMethod<
    [
      escrowId: BigNumberish,
      initiator: AddressLike,
      reason: string,
      evidence: string
    ],
    [string],
    "nonpayable"
  >;

  deactivateArbitrator: TypedContractMethod<[], [void], "nonpayable">;

  disputes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        escrowId: bigint;
        initiator: string;
        arbitrator: string;
        reason: string;
        evidence: string;
        createdAt: bigint;
        deadline: bigint;
        status: bigint;
        buyerWins: boolean;
        arbitratorFee: bigint;
      }
    ],
    "view"
  >;

  escrowManager: TypedContractMethod<[], [string], "view">;

  getArbitratorCases: TypedContractMethod<
    [arbitrator: AddressLike],
    [bigint[]],
    "view"
  >;

  getArbitratorStats: TypedContractMethod<
    [arbitrator: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        totalCases: bigint;
        successfulCases: bigint;
        successRate: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  getDispute: TypedContractMethod<
    [escrowId: BigNumberish],
    [DisputeResolution.DisputeCaseStructOutput],
    "view"
  >;

  isArbitratorActive: TypedContractMethod<
    [arbitrator: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerArbitrator: TypedContractMethod<[], [void], "payable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveDispute: TypedContractMethod<
    [escrowId: BigNumberish, buyerWins: boolean, reasoning: string],
    [void],
    "nonpayable"
  >;

  setEscrowManager: TypedContractMethod<
    [_escrowManager: AddressLike],
    [void],
    "nonpayable"
  >;

  slashArbitrator: TypedContractMethod<
    [arbitrator: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalArbitrators: TypedContractMethod<[], [bigint], "view">;

  totalDisputes: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ARBITRATION_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ARBITRATOR_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ARBITRATOR_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DISPUTE_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "arbitratorCases"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "arbitrators"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, bigint, bigint, bigint] & {
        arbitrator: string;
        stake: bigint;
        active: boolean;
        totalCases: bigint;
        successfulCases: bigint;
        lastActive: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "assignDispute"
  ): TypedContractMethod<
    [
      escrowId: BigNumberish,
      initiator: AddressLike,
      reason: string,
      evidence: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateArbitrator"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disputes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        escrowId: bigint;
        initiator: string;
        arbitrator: string;
        reason: string;
        evidence: string;
        createdAt: bigint;
        deadline: bigint;
        status: bigint;
        buyerWins: boolean;
        arbitratorFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "escrowManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getArbitratorCases"
  ): TypedContractMethod<[arbitrator: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getArbitratorStats"
  ): TypedContractMethod<
    [arbitrator: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        totalCases: bigint;
        successfulCases: bigint;
        successRate: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDispute"
  ): TypedContractMethod<
    [escrowId: BigNumberish],
    [DisputeResolution.DisputeCaseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isArbitratorActive"
  ): TypedContractMethod<[arbitrator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerArbitrator"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [escrowId: BigNumberish, buyerWins: boolean, reasoning: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEscrowManager"
  ): TypedContractMethod<[_escrowManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slashArbitrator"
  ): TypedContractMethod<
    [arbitrator: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalArbitrators"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDisputes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ArbitratorDeactivated"
  ): TypedContractEvent<
    ArbitratorDeactivatedEvent.InputTuple,
    ArbitratorDeactivatedEvent.OutputTuple,
    ArbitratorDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "ArbitratorRegistered"
  ): TypedContractEvent<
    ArbitratorRegisteredEvent.InputTuple,
    ArbitratorRegisteredEvent.OutputTuple,
    ArbitratorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ArbitratorStakeSlashed"
  ): TypedContractEvent<
    ArbitratorStakeSlashedEvent.InputTuple,
    ArbitratorStakeSlashedEvent.OutputTuple,
    ArbitratorStakeSlashedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeAssigned"
  ): TypedContractEvent<
    DisputeAssignedEvent.InputTuple,
    DisputeAssignedEvent.OutputTuple,
    DisputeAssignedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ArbitratorDeactivated(address)": TypedContractEvent<
      ArbitratorDeactivatedEvent.InputTuple,
      ArbitratorDeactivatedEvent.OutputTuple,
      ArbitratorDeactivatedEvent.OutputObject
    >;
    ArbitratorDeactivated: TypedContractEvent<
      ArbitratorDeactivatedEvent.InputTuple,
      ArbitratorDeactivatedEvent.OutputTuple,
      ArbitratorDeactivatedEvent.OutputObject
    >;

    "ArbitratorRegistered(address,uint256)": TypedContractEvent<
      ArbitratorRegisteredEvent.InputTuple,
      ArbitratorRegisteredEvent.OutputTuple,
      ArbitratorRegisteredEvent.OutputObject
    >;
    ArbitratorRegistered: TypedContractEvent<
      ArbitratorRegisteredEvent.InputTuple,
      ArbitratorRegisteredEvent.OutputTuple,
      ArbitratorRegisteredEvent.OutputObject
    >;

    "ArbitratorStakeSlashed(address,uint256)": TypedContractEvent<
      ArbitratorStakeSlashedEvent.InputTuple,
      ArbitratorStakeSlashedEvent.OutputTuple,
      ArbitratorStakeSlashedEvent.OutputObject
    >;
    ArbitratorStakeSlashed: TypedContractEvent<
      ArbitratorStakeSlashedEvent.InputTuple,
      ArbitratorStakeSlashedEvent.OutputTuple,
      ArbitratorStakeSlashedEvent.OutputObject
    >;

    "DisputeAssigned(uint256,address)": TypedContractEvent<
      DisputeAssignedEvent.InputTuple,
      DisputeAssignedEvent.OutputTuple,
      DisputeAssignedEvent.OutputObject
    >;
    DisputeAssigned: TypedContractEvent<
      DisputeAssignedEvent.InputTuple,
      DisputeAssignedEvent.OutputTuple,
      DisputeAssignedEvent.OutputObject
    >;

    "DisputeResolved(uint256,address,bool)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}

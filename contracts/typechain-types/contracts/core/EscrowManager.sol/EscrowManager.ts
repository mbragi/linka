/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ILinkaProtocol {
  export type MilestoneStruct = {
    amount: BigNumberish;
    description: string;
    completed: boolean;
    completedAt: BigNumberish;
  };

  export type MilestoneStructOutput = [
    amount: bigint,
    description: string,
    completed: boolean,
    completedAt: bigint
  ] & {
    amount: bigint;
    description: string;
    completed: boolean;
    completedAt: bigint;
  };

  export type DisputeStruct = {
    escrowId: BigNumberish;
    initiator: AddressLike;
    reason: string;
    createdAt: BigNumberish;
    status: BigNumberish;
    arbitrator: AddressLike;
  };

  export type DisputeStructOutput = [
    escrowId: bigint,
    initiator: string,
    reason: string,
    createdAt: bigint,
    status: bigint,
    arbitrator: string
  ] & {
    escrowId: bigint;
    initiator: string;
    reason: string;
    createdAt: bigint;
    status: bigint;
    arbitrator: string;
  };

  export type EscrowStruct = {
    id: BigNumberish;
    buyer: AddressLike;
    seller: AddressLike;
    amount: BigNumberish;
    platformFee: BigNumberish;
    createdAt: BigNumberish;
    expiresAt: BigNumberish;
    status: BigNumberish;
    description: string;
    metadataHash: BytesLike;
  };

  export type EscrowStructOutput = [
    id: bigint,
    buyer: string,
    seller: string,
    amount: bigint,
    platformFee: bigint,
    createdAt: bigint,
    expiresAt: bigint,
    status: bigint,
    description: string,
    metadataHash: string
  ] & {
    id: bigint;
    buyer: string;
    seller: string;
    amount: bigint;
    platformFee: bigint;
    createdAt: bigint;
    expiresAt: bigint;
    status: bigint;
    description: string;
    metadataHash: string;
  };
}

export interface EscrowManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DISPUTE_TIMEOUT"
      | "ESCROW_TIMEOUT"
      | "PLATFORM_FEE_PERCENT"
      | "cancelEscrow"
      | "createEscrow"
      | "disputeResolution"
      | "disputes"
      | "escrows"
      | "expireEscrow"
      | "fileDispute"
      | "fundEscrow"
      | "getDispute"
      | "getEscrow"
      | "getMilestones"
      | "milestones"
      | "nextEscrowId"
      | "owner"
      | "pause"
      | "paused"
      | "paymentProcessor"
      | "releasePayment"
      | "renounceOwnership"
      | "reputationRegistry"
      | "resolveDispute"
      | "setContracts"
      | "totalFees"
      | "totalVolume"
      | "transferOwnership"
      | "unpause"
      | "userEscrowCount"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DisputeResolved"
      | "EscrowCompleted"
      | "EscrowCreated"
      | "EscrowDisputed"
      | "EscrowFunded"
      | "OwnershipTransferred"
      | "Paused"
      | "ReputationUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DISPUTE_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ESCROW_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_FEE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrow",
    values: [AddressLike, string, BytesLike, ILinkaProtocol.MilestoneStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeResolution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expireEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fileDispute",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fundEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMilestones",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "milestones",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextEscrowId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentProcessor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releasePayment",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContracts",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userEscrowCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DISPUTE_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ESCROW_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_FEE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expireEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fileDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundEscrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDispute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEscrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "milestones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextEscrowId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userEscrowCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    arbitrator: AddressLike,
    buyerWins: boolean
  ];
  export type OutputTuple = [
    escrowId: bigint,
    arbitrator: string,
    buyerWins: boolean
  ];
  export interface OutputObject {
    escrowId: bigint;
    arbitrator: string;
    buyerWins: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCompletedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    amountReleased: BigNumberish
  ];
  export type OutputTuple = [escrowId: bigint, amountReleased: bigint];
  export interface OutputObject {
    escrowId: bigint;
    amountReleased: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCreatedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    buyer: AddressLike,
    seller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    buyer: string,
    seller: string,
    amount: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    buyer: string;
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowDisputedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    initiator: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    escrowId: bigint,
    initiator: string,
    reason: string
  ];
  export interface OutputObject {
    escrowId: bigint;
    initiator: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowFundedEvent {
  export type InputTuple = [escrowId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [escrowId: bigint, amount: bigint];
  export interface OutputObject {
    escrowId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    newScore: BigNumberish,
    totalTransactions: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    newScore: bigint,
    totalTransactions: bigint
  ];
  export interface OutputObject {
    user: string;
    newScore: bigint;
    totalTransactions: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EscrowManager extends BaseContract {
  connect(runner?: ContractRunner | null): EscrowManager;
  waitForDeployment(): Promise<this>;

  interface: EscrowManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DISPUTE_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  ESCROW_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  PLATFORM_FEE_PERCENT: TypedContractMethod<[], [bigint], "view">;

  cancelEscrow: TypedContractMethod<
    [escrowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createEscrow: TypedContractMethod<
    [
      seller: AddressLike,
      description: string,
      metadataHash: BytesLike,
      _milestones: ILinkaProtocol.MilestoneStruct[]
    ],
    [bigint],
    "payable"
  >;

  disputeResolution: TypedContractMethod<[], [string], "view">;

  disputes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, string] & {
        escrowId: bigint;
        initiator: string;
        reason: string;
        createdAt: bigint;
        status: bigint;
        arbitrator: string;
      }
    ],
    "view"
  >;

  escrows: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        id: bigint;
        buyer: string;
        seller: string;
        amount: bigint;
        platformFee: bigint;
        createdAt: bigint;
        expiresAt: bigint;
        status: bigint;
        description: string;
        metadataHash: string;
      }
    ],
    "view"
  >;

  expireEscrow: TypedContractMethod<
    [escrowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fileDispute: TypedContractMethod<
    [escrowId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  fundEscrow: TypedContractMethod<[escrowId: BigNumberish], [void], "payable">;

  getDispute: TypedContractMethod<
    [escrowId: BigNumberish],
    [ILinkaProtocol.DisputeStructOutput],
    "view"
  >;

  getEscrow: TypedContractMethod<
    [escrowId: BigNumberish],
    [ILinkaProtocol.EscrowStructOutput],
    "view"
  >;

  getMilestones: TypedContractMethod<
    [escrowId: BigNumberish],
    [ILinkaProtocol.MilestoneStructOutput[]],
    "view"
  >;

  milestones: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, boolean, bigint] & {
        amount: bigint;
        description: string;
        completed: boolean;
        completedAt: bigint;
      }
    ],
    "view"
  >;

  nextEscrowId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  paymentProcessor: TypedContractMethod<[], [string], "view">;

  releasePayment: TypedContractMethod<
    [escrowId: BigNumberish, milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reputationRegistry: TypedContractMethod<[], [string], "view">;

  resolveDispute: TypedContractMethod<
    [escrowId: BigNumberish, buyerWins: boolean],
    [void],
    "nonpayable"
  >;

  setContracts: TypedContractMethod<
    [
      _paymentProcessor: AddressLike,
      _reputationRegistry: AddressLike,
      _disputeResolution: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  totalFees: TypedContractMethod<[], [bigint], "view">;

  totalVolume: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userEscrowCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DISPUTE_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ESCROW_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATFORM_FEE_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelEscrow"
  ): TypedContractMethod<[escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEscrow"
  ): TypedContractMethod<
    [
      seller: AddressLike,
      description: string,
      metadataHash: BytesLike,
      _milestones: ILinkaProtocol.MilestoneStruct[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "disputeResolution"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "disputes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, string] & {
        escrowId: bigint;
        initiator: string;
        reason: string;
        createdAt: bigint;
        status: bigint;
        arbitrator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        id: bigint;
        buyer: string;
        seller: string;
        amount: bigint;
        platformFee: bigint;
        createdAt: bigint;
        expiresAt: bigint;
        status: bigint;
        description: string;
        metadataHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "expireEscrow"
  ): TypedContractMethod<[escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fileDispute"
  ): TypedContractMethod<
    [escrowId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundEscrow"
  ): TypedContractMethod<[escrowId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getDispute"
  ): TypedContractMethod<
    [escrowId: BigNumberish],
    [ILinkaProtocol.DisputeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEscrow"
  ): TypedContractMethod<
    [escrowId: BigNumberish],
    [ILinkaProtocol.EscrowStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMilestones"
  ): TypedContractMethod<
    [escrowId: BigNumberish],
    [ILinkaProtocol.MilestoneStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "milestones"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, boolean, bigint] & {
        amount: bigint;
        description: string;
        completed: boolean;
        completedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextEscrowId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "paymentProcessor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releasePayment"
  ): TypedContractMethod<
    [escrowId: BigNumberish, milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reputationRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [escrowId: BigNumberish, buyerWins: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContracts"
  ): TypedContractMethod<
    [
      _paymentProcessor: AddressLike,
      _reputationRegistry: AddressLike,
      _disputeResolution: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVolume"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userEscrowCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCompleted"
  ): TypedContractEvent<
    EscrowCompletedEvent.InputTuple,
    EscrowCompletedEvent.OutputTuple,
    EscrowCompletedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCreated"
  ): TypedContractEvent<
    EscrowCreatedEvent.InputTuple,
    EscrowCreatedEvent.OutputTuple,
    EscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowDisputed"
  ): TypedContractEvent<
    EscrowDisputedEvent.InputTuple,
    EscrowDisputedEvent.OutputTuple,
    EscrowDisputedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowFunded"
  ): TypedContractEvent<
    EscrowFundedEvent.InputTuple,
    EscrowFundedEvent.OutputTuple,
    EscrowFundedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "DisputeResolved(uint256,address,bool)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "EscrowCompleted(uint256,uint256)": TypedContractEvent<
      EscrowCompletedEvent.InputTuple,
      EscrowCompletedEvent.OutputTuple,
      EscrowCompletedEvent.OutputObject
    >;
    EscrowCompleted: TypedContractEvent<
      EscrowCompletedEvent.InputTuple,
      EscrowCompletedEvent.OutputTuple,
      EscrowCompletedEvent.OutputObject
    >;

    "EscrowCreated(uint256,address,address,uint256)": TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;
    EscrowCreated: TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;

    "EscrowDisputed(uint256,address,string)": TypedContractEvent<
      EscrowDisputedEvent.InputTuple,
      EscrowDisputedEvent.OutputTuple,
      EscrowDisputedEvent.OutputObject
    >;
    EscrowDisputed: TypedContractEvent<
      EscrowDisputedEvent.InputTuple,
      EscrowDisputedEvent.OutputTuple,
      EscrowDisputedEvent.OutputObject
    >;

    "EscrowFunded(uint256,uint256)": TypedContractEvent<
      EscrowFundedEvent.InputTuple,
      EscrowFundedEvent.OutputTuple,
      EscrowFundedEvent.OutputObject
    >;
    EscrowFunded: TypedContractEvent<
      EscrowFundedEvent.InputTuple,
      EscrowFundedEvent.OutputTuple,
      EscrowFundedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReputationUpdated(address,uint256,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}

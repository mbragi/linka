---
alwaysApply: true
---

# Linka Project Rules

## 🛠️ Development Style

- Do not generate boilerplate unless asked.
- Use concise, production-level TypeScript and Solidity code.
- Prefer modular services and shared utilities.
- Do not write full UI component trees unless explicitly requested.

## 🧩 Code Structure

- Backend services live in `apps/backend/src/`
- Smart contracts live in `apps/contracts/contracts/`
- Mini-app frontend lives in `apps/mini-app/`
- Agent logic is in `apps/mini-app/app/api/agent/route.ts`
- All services must be swappable and testable.

## 🌐 External Service Handling

- OpenAI GPT-4o-mini for conversational AI
- WaSender API for WhatsApp integration
- MongoDB for data persistence
- Ethers.js v6 for blockchain interactions
- All third-party integrations go through adapters/APIs

## 💬 Conversational Flow

- UX must be chat-native: messages come first, UI is optional.
- Chat state is session-bound in memory or database.
- Do not generate rigid decision trees.
- Support multi-channel: WhatsApp, Web, Farcaster

## 🧠 AI Agent Routing

- OpenAI GPT-4o-mini classifies user messages into intents.
- Each intent maps to a backend tool (e.g. `create_escrow`, `search_vendors`).
- Always include fallback support for unknown intents.

## 🧾 Wallet Identity

- Every user must have a custodial wallet.
- Wallet is created on onboarding (even on WhatsApp).
- Email is the primary binding key (Google preferred for OAuth).
- Private keys encrypted and stored in MongoDB.

## 🚫 Do Not

- Do not generate UIs that depend on modals.
- Do not bind data structures to UI state.
- Do not hardcode API keys or private keys.

## ✅ Always

- Use TypeScript for all application code.
- Use Solidity for smart contracts on Base network.
- Use `.env.local` for environment variables.
- Keep flows testable without UI.
- Follow existing code structure and patterns.
- Maintain brand consistency per `docs/BRAND.md`

## 📱 Multi-Channel Support

- **WhatsApp (WaSender)**: Webhook-based messaging via `app/api/webhook/whatsapp/route.ts`
- **Web**: Next.js frontend with chat interface
- **Farcaster**: MiniKit integration with manifest configuration
- All channels use the same AI agent and backend services

## 🔗 Blockchain Integration

- Network: Base (Base Sepolia testnet / Base mainnet)
- Smart Contracts: EscrowManager, PaymentProcessor, ReputationRegistry, DisputeResolution
- All transactions recorded on Base blockchain
- Use Ethers.js v6 for all contract interactions

## 🧪 Testing & Quality

- Write tests for critical business logic
- Use TypeScript for type safety
- Follow existing linting rules
- Test multi-channel flows separately

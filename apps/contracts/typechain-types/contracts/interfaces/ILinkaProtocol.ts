/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface ILinkaProtocolInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "DisputeResolved"
      | "EscrowCompleted"
      | "EscrowCreated"
      | "EscrowDisputed"
      | "EscrowFunded"
      | "ReputationUpdated"
  ): EventFragment;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    arbitrator: AddressLike,
    buyerWins: boolean
  ];
  export type OutputTuple = [
    escrowId: bigint,
    arbitrator: string,
    buyerWins: boolean
  ];
  export interface OutputObject {
    escrowId: bigint;
    arbitrator: string;
    buyerWins: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCompletedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    amountReleased: BigNumberish
  ];
  export type OutputTuple = [escrowId: bigint, amountReleased: bigint];
  export interface OutputObject {
    escrowId: bigint;
    amountReleased: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCreatedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    buyer: AddressLike,
    seller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    buyer: string,
    seller: string,
    amount: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    buyer: string;
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowDisputedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    initiator: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    escrowId: bigint,
    initiator: string,
    reason: string
  ];
  export interface OutputObject {
    escrowId: bigint;
    initiator: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowFundedEvent {
  export type InputTuple = [escrowId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [escrowId: bigint, amount: bigint];
  export interface OutputObject {
    escrowId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    newScore: BigNumberish,
    totalTransactions: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    newScore: bigint,
    totalTransactions: bigint
  ];
  export interface OutputObject {
    user: string;
    newScore: bigint;
    totalTransactions: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILinkaProtocol extends BaseContract {
  connect(runner?: ContractRunner | null): ILinkaProtocol;
  waitForDeployment(): Promise<this>;

  interface: ILinkaProtocolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCompleted"
  ): TypedContractEvent<
    EscrowCompletedEvent.InputTuple,
    EscrowCompletedEvent.OutputTuple,
    EscrowCompletedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCreated"
  ): TypedContractEvent<
    EscrowCreatedEvent.InputTuple,
    EscrowCreatedEvent.OutputTuple,
    EscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowDisputed"
  ): TypedContractEvent<
    EscrowDisputedEvent.InputTuple,
    EscrowDisputedEvent.OutputTuple,
    EscrowDisputedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowFunded"
  ): TypedContractEvent<
    EscrowFundedEvent.InputTuple,
    EscrowFundedEvent.OutputTuple,
    EscrowFundedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;

  filters: {
    "DisputeResolved(uint256,address,bool)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "EscrowCompleted(uint256,uint256)": TypedContractEvent<
      EscrowCompletedEvent.InputTuple,
      EscrowCompletedEvent.OutputTuple,
      EscrowCompletedEvent.OutputObject
    >;
    EscrowCompleted: TypedContractEvent<
      EscrowCompletedEvent.InputTuple,
      EscrowCompletedEvent.OutputTuple,
      EscrowCompletedEvent.OutputObject
    >;

    "EscrowCreated(uint256,address,address,uint256)": TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;
    EscrowCreated: TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;

    "EscrowDisputed(uint256,address,string)": TypedContractEvent<
      EscrowDisputedEvent.InputTuple,
      EscrowDisputedEvent.OutputTuple,
      EscrowDisputedEvent.OutputObject
    >;
    EscrowDisputed: TypedContractEvent<
      EscrowDisputedEvent.InputTuple,
      EscrowDisputedEvent.OutputTuple,
      EscrowDisputedEvent.OutputObject
    >;

    "EscrowFunded(uint256,uint256)": TypedContractEvent<
      EscrowFundedEvent.InputTuple,
      EscrowFundedEvent.OutputTuple,
      EscrowFundedEvent.OutputObject
    >;
    EscrowFunded: TypedContractEvent<
      EscrowFundedEvent.InputTuple,
      EscrowFundedEvent.OutputTuple,
      EscrowFundedEvent.OutputObject
    >;

    "ReputationUpdated(address,uint256,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
  };
}

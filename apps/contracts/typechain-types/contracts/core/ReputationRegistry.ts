/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ReputationRegistry {
  export type ReputationDataStruct = {
    score: BigNumberish;
    totalTransactions: BigNumberish;
    completedTransactions: BigNumberish;
    disputes: BigNumberish;
    totalVolume: BigNumberish;
    lastUpdated: BigNumberish;
    email: string;
    isVendor: boolean;
  };

  export type ReputationDataStructOutput = [
    score: bigint,
    totalTransactions: bigint,
    completedTransactions: bigint,
    disputes: bigint,
    totalVolume: bigint,
    lastUpdated: bigint,
    email: string,
    isVendor: boolean
  ] & {
    score: bigint;
    totalTransactions: bigint;
    completedTransactions: bigint;
    disputes: bigint;
    totalVolume: bigint;
    lastUpdated: bigint;
    email: string;
    isVendor: boolean;
  };
}

export interface ReputationRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "emailToAddress"
      | "getReputation"
      | "getReputationData"
      | "getUserByEmail"
      | "isUserRegistered"
      | "isVendor"
      | "nextTokenId"
      | "owner"
      | "registerUser"
      | "renounceOwnership"
      | "reputations"
      | "transferOwnership"
      | "updateReputation"
      | "updateTransactionStats"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DisputeResolved"
      | "EscrowCompleted"
      | "EscrowCreated"
      | "EscrowDisputed"
      | "EscrowFunded"
      | "OwnershipTransferred"
      | "ReputationUpdated(address,uint256)"
      | "ReputationUpdated(address,uint256,uint256)"
      | "UserRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "emailToAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserByEmail",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVendor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [AddressLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTransactionStats",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "emailToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserByEmail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVendor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTransactionStats",
    data: BytesLike
  ): Result;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    arbitrator: AddressLike,
    buyerWins: boolean
  ];
  export type OutputTuple = [
    escrowId: bigint,
    arbitrator: string,
    buyerWins: boolean
  ];
  export interface OutputObject {
    escrowId: bigint;
    arbitrator: string;
    buyerWins: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCompletedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    amountReleased: BigNumberish
  ];
  export type OutputTuple = [escrowId: bigint, amountReleased: bigint];
  export interface OutputObject {
    escrowId: bigint;
    amountReleased: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCreatedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    buyer: AddressLike,
    seller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    buyer: string,
    seller: string,
    amount: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    buyer: string;
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowDisputedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    initiator: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    escrowId: bigint,
    initiator: string,
    reason: string
  ];
  export interface OutputObject {
    escrowId: bigint;
    initiator: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowFundedEvent {
  export type InputTuple = [escrowId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [escrowId: bigint, amount: bigint];
  export interface OutputObject {
    escrowId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdated_address_uint256_Event {
  export type InputTuple = [user: AddressLike, newReputation: BigNumberish];
  export type OutputTuple = [user: string, newReputation: bigint];
  export interface OutputObject {
    user: string;
    newReputation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdated_address_uint256_uint256_Event {
  export type InputTuple = [
    user: AddressLike,
    newScore: BigNumberish,
    totalTransactions: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    newScore: bigint,
    totalTransactions: bigint
  ];
  export interface OutputObject {
    user: string;
    newScore: bigint;
    totalTransactions: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [
    user: AddressLike,
    email: string,
    isVendor: boolean
  ];
  export type OutputTuple = [user: string, email: string, isVendor: boolean];
  export interface OutputObject {
    user: string;
    email: string;
    isVendor: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReputationRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ReputationRegistry;
  waitForDeployment(): Promise<this>;

  interface: ReputationRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emailToAddress: TypedContractMethod<[arg0: string], [string], "view">;

  getReputation: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getReputationData: TypedContractMethod<
    [user: AddressLike],
    [ReputationRegistry.ReputationDataStructOutput],
    "view"
  >;

  getUserByEmail: TypedContractMethod<[email: string], [string], "view">;

  isUserRegistered: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  isVendor: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  nextTokenId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerUser: TypedContractMethod<
    [user: AddressLike, email: string, vendorStatus: boolean],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reputations: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, string, boolean] & {
        score: bigint;
        totalTransactions: bigint;
        completedTransactions: bigint;
        disputes: bigint;
        totalVolume: bigint;
        lastUpdated: bigint;
        email: string;
        isVendor: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateReputation: TypedContractMethod<
    [user: AddressLike, newReputation: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTransactionStats: TypedContractMethod<
    [
      user: AddressLike,
      totalTransactions: BigNumberish,
      completedTransactions: BigNumberish,
      disputes: BigNumberish,
      totalVolume: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "emailToAddress"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "getReputation"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReputationData"
  ): TypedContractMethod<
    [user: AddressLike],
    [ReputationRegistry.ReputationDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserByEmail"
  ): TypedContractMethod<[email: string], [string], "view">;
  getFunction(
    nameOrSignature: "isUserRegistered"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVendor"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<
    [user: AddressLike, email: string, vendorStatus: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reputations"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, string, boolean] & {
        score: bigint;
        totalTransactions: bigint;
        completedTransactions: bigint;
        disputes: bigint;
        totalVolume: bigint;
        lastUpdated: bigint;
        email: string;
        isVendor: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReputation"
  ): TypedContractMethod<
    [user: AddressLike, newReputation: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTransactionStats"
  ): TypedContractMethod<
    [
      user: AddressLike,
      totalTransactions: BigNumberish,
      completedTransactions: BigNumberish,
      disputes: BigNumberish,
      totalVolume: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCompleted"
  ): TypedContractEvent<
    EscrowCompletedEvent.InputTuple,
    EscrowCompletedEvent.OutputTuple,
    EscrowCompletedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCreated"
  ): TypedContractEvent<
    EscrowCreatedEvent.InputTuple,
    EscrowCreatedEvent.OutputTuple,
    EscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowDisputed"
  ): TypedContractEvent<
    EscrowDisputedEvent.InputTuple,
    EscrowDisputedEvent.OutputTuple,
    EscrowDisputedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowFunded"
  ): TypedContractEvent<
    EscrowFundedEvent.InputTuple,
    EscrowFundedEvent.OutputTuple,
    EscrowFundedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated(address,uint256)"
  ): TypedContractEvent<
    ReputationUpdated_address_uint256_Event.InputTuple,
    ReputationUpdated_address_uint256_Event.OutputTuple,
    ReputationUpdated_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated(address,uint256,uint256)"
  ): TypedContractEvent<
    ReputationUpdated_address_uint256_uint256_Event.InputTuple,
    ReputationUpdated_address_uint256_uint256_Event.OutputTuple,
    ReputationUpdated_address_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;

  filters: {
    "DisputeResolved(uint256,address,bool)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "EscrowCompleted(uint256,uint256)": TypedContractEvent<
      EscrowCompletedEvent.InputTuple,
      EscrowCompletedEvent.OutputTuple,
      EscrowCompletedEvent.OutputObject
    >;
    EscrowCompleted: TypedContractEvent<
      EscrowCompletedEvent.InputTuple,
      EscrowCompletedEvent.OutputTuple,
      EscrowCompletedEvent.OutputObject
    >;

    "EscrowCreated(uint256,address,address,uint256)": TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;
    EscrowCreated: TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;

    "EscrowDisputed(uint256,address,string)": TypedContractEvent<
      EscrowDisputedEvent.InputTuple,
      EscrowDisputedEvent.OutputTuple,
      EscrowDisputedEvent.OutputObject
    >;
    EscrowDisputed: TypedContractEvent<
      EscrowDisputedEvent.InputTuple,
      EscrowDisputedEvent.OutputTuple,
      EscrowDisputedEvent.OutputObject
    >;

    "EscrowFunded(uint256,uint256)": TypedContractEvent<
      EscrowFundedEvent.InputTuple,
      EscrowFundedEvent.OutputTuple,
      EscrowFundedEvent.OutputObject
    >;
    EscrowFunded: TypedContractEvent<
      EscrowFundedEvent.InputTuple,
      EscrowFundedEvent.OutputTuple,
      EscrowFundedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReputationUpdated(address,uint256)": TypedContractEvent<
      ReputationUpdated_address_uint256_Event.InputTuple,
      ReputationUpdated_address_uint256_Event.OutputTuple,
      ReputationUpdated_address_uint256_Event.OutputObject
    >;
    "ReputationUpdated(address,uint256,uint256)": TypedContractEvent<
      ReputationUpdated_address_uint256_uint256_Event.InputTuple,
      ReputationUpdated_address_uint256_uint256_Event.OutputTuple,
      ReputationUpdated_address_uint256_uint256_Event.OutputObject
    >;

    "UserRegistered(address,string,bool)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
  };
}
